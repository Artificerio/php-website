-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.reservation_status
(
    id integer NOT NULL,
    status_value character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT pk_res_status PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reservation
(
    id integer NOT NULL,
    book_id integer,
    member_id integer,
    reservation_date date,
    reservation_status_id integer,
    CONSTRAINT pk_reservation PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.member_status
(
    id integer NOT NULL,
    status_value character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT pk_memberstatus PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.member
(
    id integer NOT NULL,
    first_name character varying(300) COLLATE pg_catalog."default",
    last_name character varying(300) COLLATE pg_catalog."default",
    joined_date date,
    active_status_id integer,
    CONSTRAINT pk_member PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.loan
(
    id integer NOT NULL,
    book_id integer,
    member_id integer,
    loan_date date,
    returned_date date,
    CONSTRAINT pk_loan PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.fine_payment
(
    id integer NOT NULL,
    member_id integer,
    payment_date date,
    payment_amount integer,
    CONSTRAINT pk_fine_payment PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.book_author
(
    book_id integer,
    author_id integer
);

CREATE TABLE IF NOT EXISTS public.book
(
    id integer NOT NULL,
    title character varying(500) COLLATE pg_catalog."default",
    category_id integer,
    shop_id integer,
    publication_date_id integer,
    CONSTRAINT pk_book PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.author
(
    id integer NOT NULL,
    first_name character varying(300) COLLATE pg_catalog."default",
    last_name character varying(300) COLLATE pg_catalog."default",
    wiki_id integer,
    CONSTRAINT pk_author PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.fine
(
    id integer NOT NULL,
    member_id integer,
    loan_id integer,
    fine_date date,
    fine_amount integer,
    CONSTRAINT pk_fine PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.category
(
    id integer NOT NULL,
    category_name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT pk_category PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.images
(
    id bigint NOT NULL,
    book_id bigint NOT NULL,
    member_id bigint NOT NULL,
    _file text,
    _type text,
    _size bigint,
    _desc text,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.review
(
    id bigint NOT NULL,
    member_id bigint NOT NULL,
    book_id bigint NOT NULL,
    _text text NOT NULL,
    _date date NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.wiki
(
    id integer NOT NULL,
    author_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.author_full
(
    id integer NOT NULL,
    first_name character varying(300),
    last_name character varying(300),
    date_of_birth date,
    education character varying(200),
    life_facts character varying(100000),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.shop
(
    id integer NOT NULL,
    shop_name character varying(100) COLLATE pg_catalog."default",
    shop_address character varying(100) COLLATE pg_catalog."default",
    book_id integer,
    copies_owned integer,
    CONSTRAINT shop_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.publication_date
(
    id integer NOT NULL,
    publication_date date,
    CONSTRAINT publication_date_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.reservation
    ADD FOREIGN KEY (reservation_status_id)
    REFERENCES public.reservation_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reservation
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reservation
    ADD FOREIGN KEY (member_id)
    REFERENCES public.member (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.member
    ADD FOREIGN KEY (active_status_id)
    REFERENCES public.member_status (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.loan
    ADD FOREIGN KEY (member_id)
    REFERENCES public.member (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.loan
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fine_payment
    ADD FOREIGN KEY (member_id)
    REFERENCES public.member (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.book_author
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.book_author
    ADD FOREIGN KEY (author_id)
    REFERENCES public.author (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.book
    ADD FOREIGN KEY (category_id)
    REFERENCES public.category (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.book
    ADD FOREIGN KEY (shop_id)
    REFERENCES public.shop (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.book
    ADD FOREIGN KEY (publication_date_id)
    REFERENCES public.publication_date (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fine
    ADD FOREIGN KEY (member_id)
    REFERENCES public.member (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fine
    ADD FOREIGN KEY (loan_id)
    REFERENCES public.loan (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.images
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.images
    ADD FOREIGN KEY (member_id)
    REFERENCES public.member (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.review
    ADD FOREIGN KEY (member_id)
    REFERENCES public.member (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.review
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.wiki
    ADD FOREIGN KEY (author_id)
    REFERENCES public.author (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.wiki
    ADD FOREIGN KEY (author_id)
    REFERENCES public.author_full (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.shop
    ADD FOREIGN KEY (book_id)
    REFERENCES public.book (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
